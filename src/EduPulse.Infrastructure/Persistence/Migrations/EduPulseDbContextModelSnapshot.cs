// <auto-generated />
using System;
using EduPulse.Domain.Enums;
using EduPulse.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EduPulse.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(EduPulseDbContext))]
    partial class EduPulseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "test_status", new[] { "scheduled", "opened", "closed" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EduPulse.Domain.Entities.AnswerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("QuestionEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_entity_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_answer_entity");

                    b.HasIndex("QuestionEntityId")
                        .HasDatabaseName("ix_answer_entity_question_entity_id");

                    b.ToTable("answer_entity", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.GroupEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid")
                        .HasColumnName("institute_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("InstituteId")
                        .HasDatabaseName("ix_groups_institute_id");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_groups_title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "btree");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.InstituteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_institutes");

                    b.ToTable("institutes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea358f17-8bf4-40d0-8012-a53e58539e76"),
                            Code = "ІДА",
                            Title = "Адміністрування, державного управління та професійного розвитку інститут"
                        },
                        new
                        {
                            Id = new Guid("6a3e53f5-ae3b-4a92-8167-7e3ffb643c9b"),
                            Code = "ІАРД",
                            Title = "Архітектури та дизайну інститут"
                        },
                        new
                        {
                            Id = new Guid("db7c95a1-b470-4a7d-8a01-a2e944dee190"),
                            Code = "ІБІС",
                            Title = "Будівництва та інженерних систем інститут"
                        },
                        new
                        {
                            Id = new Guid("a3123b16-be65-405e-b1c4-3b1969e80988"),
                            Code = "ІГДГ",
                            Title = "Геодезії інститут"
                        },
                        new
                        {
                            Id = new Guid("64ce574c-b23d-4571-b445-16675e98edd7"),
                            Code = "ІГСН",
                            Title = "Гуманітарних та соціальних наук інститут"
                        },
                        new
                        {
                            Id = new Guid("4930041c-ce0e-4b59-9caf-938e2afbe84c"),
                            Code = "ІНЕМ",
                            Title = "Економіки і менеджменту інститут"
                        },
                        new
                        {
                            Id = new Guid("4d0fb2a3-5c2d-48af-93a5-c585536bb9ae"),
                            Code = "ІЕСК",
                            Title = "Енергетики та систем керування інститут"
                        },
                        new
                        {
                            Id = new Guid("1e992a4d-9dec-4576-93a8-2dc038e916ce"),
                            Code = "КНІ",
                            Title = "Комп'ютерних наук та інформаційних технологій"
                        },
                        new
                        {
                            Id = new Guid("bf0ea459-1011-49e6-bc65-0ebd9e5f8b0c"),
                            Code = "ІКТА",
                            Title = "Комп'ютерних технологій, автоматики та метрології інститут"
                        },
                        new
                        {
                            Id = new Guid("5c2d66d6-4018-4daf-a8c1-1d784d2ffcc1"),
                            Code = "ІМІТ",
                            Title = "Механічної інженерії та транспорту інститут"
                        },
                        new
                        {
                            Id = new Guid("838188cd-c3e1-44ba-aadc-7161e9559ef6"),
                            Code = "ІППО",
                            Title = "Права, психології та інноваційної освіти інститут"
                        },
                        new
                        {
                            Id = new Guid("5fb0be5a-bb70-472d-b9e4-a24cc867b853"),
                            Code = "ІМФН",
                            Title = "Прикладної математики та фундаментальних наук інститут"
                        },
                        new
                        {
                            Id = new Guid("17f2161b-eb53-4314-b32a-4a489c788b44"),
                            Code = "ІППТ",
                            Title = "Просторового планування та перспективних технологій інститут"
                        },
                        new
                        {
                            Id = new Guid("77c0eead-3166-4813-8205-4f8168136882"),
                            Code = "ІСТР",
                            Title = "Сталого розвитку і ім. В.Чорновола інститут"
                        },
                        new
                        {
                            Id = new Guid("54880322-70f3-4373-96e4-fbc92020d4d1"),
                            Code = "ІТРЕ",
                            Title = "Телекомунікацій, радіоелектроніки та електронної техніки інститут"
                        },
                        new
                        {
                            Id = new Guid("23c3d117-b0bd-44ac-b79f-9f881260537c"),
                            Code = "ІХХТ",
                            Title = "Хімії та хімічних технологій інститут"
                        });
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.QuestionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CorrectAnswerId")
                        .HasColumnType("uuid")
                        .HasColumnName("correct_answer_id");

                    b.Property<Guid?>("TestEntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("test_entity_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_question_entity");

                    b.HasIndex("TestEntityId")
                        .HasDatabaseName("ix_question_entity_test_entity_id");

                    b.ToTable("question_entity", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.StudentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("integer")
                        .HasColumnName("age");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_students_email");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Email"), "btree");

                    b.HasIndex("FullName")
                        .HasDatabaseName("ix_students_full_name");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("FullName"), "btree");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_students_group_id");

                    b.ToTable("students", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.SubjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.TeacherEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.HasKey("Id")
                        .HasName("pk_teachers");

                    b.ToTable("teachers", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.TeacherGroupEntity", b =>
                {
                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_id");

                    b.HasKey("GroupId", "TeacherId")
                        .HasName("pk_teacher_groups");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_teacher_groups_teacher_id");

                    b.ToTable("teacher_groups", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.TeacherSubjectEntity", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid")
                        .HasColumnName("teacher_id");

                    b.HasKey("SubjectId", "TeacherId")
                        .HasName("pk_teacher_subjects");

                    b.HasIndex("TeacherId")
                        .HasDatabaseName("ix_teacher_subjects_teacher_id");

                    b.ToTable("teacher_subjects", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.TestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("ClosesAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closes_at");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("OpensAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opens_at");

                    b.Property<TestStatus>("Status")
                        .HasColumnType("test_status")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_tests");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_tests_title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "btree");

                    b.ToTable("tests", (string)null);
                });

            modelBuilder.Entity("EduPulse.Infrastructure.Entities.CentrifugoOutboxEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.Property<int>("Partition")
                        .HasColumnType("integer")
                        .HasColumnName("partition");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.HasKey("Id")
                        .HasName("pk_centrifugo_outbox");

                    b.ToTable("centrifugo_outbox", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("GroupEntitySubjectEntity", b =>
                {
                    b.Property<Guid>("GroupsId")
                        .HasColumnType("uuid")
                        .HasColumnName("groups_id");

                    b.Property<Guid>("SubjectsId")
                        .HasColumnType("uuid")
                        .HasColumnName("subjects_id");

                    b.HasKey("GroupsId", "SubjectsId")
                        .HasName("pk_group_entity_subject_entity");

                    b.HasIndex("SubjectsId")
                        .HasDatabaseName("ix_group_entity_subject_entity_subjects_id");

                    b.ToTable("group_entity_subject_entity", (string)null);
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.AnswerEntity", b =>
                {
                    b.HasOne("EduPulse.Domain.Entities.QuestionEntity", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionEntityId")
                        .HasConstraintName("fk_answer_entity_question_entity_question_entity_id");
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.GroupEntity", b =>
                {
                    b.HasOne("EduPulse.Domain.Entities.InstituteEntity", "Institute")
                        .WithMany()
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_groups_institutes_institute_id");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.QuestionEntity", b =>
                {
                    b.HasOne("EduPulse.Domain.Entities.TestEntity", null)
                        .WithMany("Questions")
                        .HasForeignKey("TestEntityId")
                        .HasConstraintName("fk_question_entity_tests_test_entity_id");
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.StudentEntity", b =>
                {
                    b.HasOne("EduPulse.Domain.Entities.GroupEntity", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_groups_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.TeacherGroupEntity", b =>
                {
                    b.HasOne("EduPulse.Domain.Entities.GroupEntity", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_groups_groups_group_id");

                    b.HasOne("EduPulse.Domain.Entities.TeacherEntity", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_groups_teachers_teacher_id");

                    b.Navigation("Group");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.TeacherSubjectEntity", b =>
                {
                    b.HasOne("EduPulse.Domain.Entities.SubjectEntity", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_subjects_subjects_subject_id");

                    b.HasOne("EduPulse.Domain.Entities.TeacherEntity", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_teacher_subjects_teachers_teacher_id");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("GroupEntitySubjectEntity", b =>
                {
                    b.HasOne("EduPulse.Domain.Entities.GroupEntity", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_entity_subject_entity_groups_groups_id");

                    b.HasOne("EduPulse.Domain.Entities.SubjectEntity", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_group_entity_subject_entity_subjects_subjects_id");
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.GroupEntity", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.QuestionEntity", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("EduPulse.Domain.Entities.TestEntity", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
